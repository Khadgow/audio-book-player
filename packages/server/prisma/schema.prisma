generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Audiobook {
  id                        String      @id @default(uuid()) @db.Uuid
  name                      String?     @db.VarChar(255)
  bookId                    String?     @map("book_id") @db.Uuid
  voiceActorId              String?     @map("voice_actor_id") @db.Uuid
  duration                  Int?
  book_audiobook_bookTobook Book?       @relation("audiobook_bookTobook", fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voiceActor                VoiceActor? @relation(fields: [voiceActorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  audio                     Audio[]     @relation("audioToAudiobook")
  history                   History[]   @relation("historyToAudiobook")

  @@map("audiobook")
}

model Audio {
  id          String     @id @default(uuid()) @db.Uuid
  position    Int?
  name        String?    @db.VarChar(255)
  audioUrl    String?    @map("audio_url") @db.VarChar(255)
  duration    Int?
  audiobookId String?    @map("audiobook_id") @db.Uuid
  audiobook   Audiobook? @relation("audioToAudiobook", fields: [audiobookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  history     History[]  @relation("historyToAudio")

  @@map("audio")
}

model Author {
  id                       String  @id @default(uuid()) @db.Uuid
  surname                  String? @db.VarChar(255)
  name                     String? @db.VarChar(255)
  patronymic               String? @db.VarChar(255)
  book_book_authorToauthor Book[]  @relation("book_authorToauthor")

  @@map("author")
}

model Book {
  id         String      @id @default(uuid()) @db.Uuid
  name       String?     @db.VarChar(255)
  authorId   String?     @map("author_id") @db.Uuid
  imageUrl   String?     @map("image_url") @db.VarChar(255)
  audiobooks Audiobook[] @relation("audiobook_bookTobook")
  author     Author?     @relation("book_authorToauthor", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genres     BookGenre[]

  @@map("book")
}

model BookGenre {
  genre_id String @db.Uuid
  book_id  String @db.Uuid
  book     Book   @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genre    Genre  @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([genre_id, book_id])
  @@map("book_genre")
}

model Genre {
  id         String      @id @default(uuid()) @db.Uuid
  name       String?     @db.VarChar(255)
  book_genre BookGenre[]

  @@map("genre")
}

model History {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String?    @map("user_id") @db.Uuid
  audiobookId String?    @map("audiobook_id") @db.Uuid
  audioId     String?    @map("audio_id") @db.Uuid
  updatedAt   DateTime?  @map("updated_at") @db.Timestamptz()
  time        Int?
  user        User?      @relation("historyToUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  audio       Audio?     @relation("historyToAudio", fields: [audioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  audiobook   Audiobook? @relation("historyToAudiobook", fields: [audiobookId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("history")
}

model Role {
  id        String     @id @default(uuid()) @db.Uuid
  name      String?    @db.VarChar(255)
  user_role UserRole[]

  @@map("role")
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  username  String?    @db.VarChar(255)
  password  String?    @db.VarChar(255)
  email     String?    @unique @db.VarChar(255)
  roles     UserRole[]
  history   History[]  @relation("historyToUser")

  @@map("user")
}

model UserRole {
  role_id String @db.Uuid
  user_id String @db.Uuid
  role    Role   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([role_id, user_id])
  @@map("user_role")
}

model VoiceActor {
  id         String      @id @default(uuid()) @db.Uuid
  surname    String?     @db.VarChar(255)
  name       String?     @db.VarChar(255)
  patronymic String?     @db.VarChar(255)
  audiobook  Audiobook[]

  @@map("voice_actor")
}
